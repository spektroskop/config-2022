source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload
plug "https://gitlab.com/fsub/kakoune-mark.git"
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option buffer softtabstop 4
    expandtab
} config %{
    hook global WinSetOption filetype=makefile noexpandtab
    hook global WinSetOption filetype=go noexpandtab
}

plug "Delapouite/kakoune-buffers" config %{
    map global user b ':enter-buffers-mode<ret>' -docstring 'Buffers'
}

plug "Delapouite/kakoune-cd" config %{
  map global user c ':enter-user-mode cd<ret>' -docstring 'Chdir'
}

plug "kak-lsp/kak-lsp" do %{
    cargo install --locked --force --path .
}

plug "TeddyDD/kakoune-edit-or-dir"

# plug "gustavo-hms/luar"
# plug "alexherbo2/search.kak"
# evanrelf/reselect.kak
# alexherbo2/word-select.kak
# evanrelf/byline.kak

source "%val{config}/rc/movement.kak"
# source "%val{config}/rc/reselect.kak"
#source "%val{config}/rc/select-word.kak"
# source "%val{config}/rc/select-line.kak"
# source "%val{config}/rc/select-vertical.kak"
source "%val{config}/rc/connect.kak"
source "%val{config}/rc/bufname.kak"

define-command -override surround-add -params 2 %{
    execute-keys "i%arg{1}<esc>a%arg{2}<esc>"
}
# define-command -hidden surround-add -params 2 %{
#         exec "i%arg{1}<esc>Ha%arg{2}" <esc>
# }
# define-command -hidden surround-del %{
#         exec "i<del><esc>a<backspace><esc>"
# }
# define-command -hidden surround-move -params 2 %{
#         exec "%arg{1}<a-;>%arg{2}<a-;>"
# }

colorscheme gruvy

set-option -add global ui_options ncurses_assistant=none
set-option -add global ui_options ncurses_status_on_top=false
set-option -add global ui_options ncurses_enable_mouse=false
set-option -add global ui_options terminal_set_title=false
set-option      global startup_info_version 20200901
set-option      global autoreload yes
# set-option      global writemethod replace
set-option      global grepcmd 'rg -iHL --column'
set-option      global scrolloff 3,3
set-option      global autocomplete prompt
set-option      global tabstop 4
set-option      global indentwidth 4
set-option      global modelinefmt "%opt{theme_modeline}"
set-option      global disabled_hooks '.*-(insert|indent)'
# set-option      global disabled_hooks '.*-(insert)'
set-option      global idle_timeout 100
set-option      global completers word=buffer

alias global bd delete-buffer
alias global bd! delete-buffer!
alias global color colorscheme
alias global qa quit
alias global qa! quit!
alias global wqa write-quit
alias global wqa! write-quit!

define-command two-pane -override -params 0..1 %{
    try %{ rename-session %arg{1} }
    rename-client main
    set-option global jumpclient main
    new rename-client tool
    set-option global toolsclient tool
    # new rename-client doc
    # set-option global docsclient doc
}

# map global normal '<tab>' ':match-indent<ret>'
# define-command match-indent -override %{
#     try %{ execute-keys -draft 'K<a-&>' }
#     try %{ execute-keys -draft 'k<a-x>s^\h+$<ret>d' }
# }

define-command copy-indent -override %{
    # execute-keys -draft k<a-x> s^\h+<ret>y j<a-h>P
    # execute-keys -draft Z <a-/>^\h+<ret>y z gh<a-i><space>R

    # TODO: look up,
    # find first non-empty (except whitespace) line
    # copy indent
    # return
    # remove current indent
    # paste indent before cursor

    # execute-keys -draft Z <a-/>\s*<ret> <a-;> gh
    # try %{ execute-keys -draft <a-i><space> }
    # execute-keys -draft '"zy' z
    # try %{ execute-keys -draft gh<a-i><space>d }
    # execute-keys -draft '"zP'

    execute-keys -draft Z <a-/>^\h+(?=[^\s])<ret> '"zy' z
    try %{ execute-keys -draft gh<a-i><space>d }
    execute-keys -draft '"zP'
}

map global normal '<tab>' ':copy-indent<ret>'
map global insert '<s-tab>' '<a-;>:copy-indent<ret>'

# TODO: handle spaces
define-command grep-selection -override %{
    grep "%val{selection}"
}
alias global g grep-selection

define-command remove-whitespace -override %{
    try %{ execute-keys -draft \%s\h+$<ret>d }
}

define-command find -override -params 1 \
    -shell-script-candidates %{ rg --files } \
    %{ edit %arg{1} }

alias global f find

define-command source-kakrc -hidden -override \
    %{ source "%val{config}/kakrc" }

define-command source-current-file -hidden -override \
    %{ source %val{buffile} }

define-command reset-completions -override %{
    set-option window completers word=buffer
}

define-command toggle-highlighter -override -params .. %{
    try %{
        add-highlighter "window/%arg{@}" %arg{@}
        echo -markup {Information} %arg{@}
    } catch %{
        remove-highlighter "window/%arg{@}"
        echo -markup {Error} %arg{@}
    }
}

define-command toggle-wrap -override %{
    toggle-highlighter wrap -word -indent -marker '» '
}

define-command enable-wrap -override %{
    add-highlighter window/wrap wrap \
        -word -indent -marker '» '
}

define-command disable-wrap -override %{
    remove-highlighter window/wrap
}

define-command window-padding -override %{
    declare-option line-specs padding_flags
    set-option window padding_flags %val{timestamp} '1| '
    try %{ remove-highlighter window/padding }
    add-highlighter window/padding flag-lines Default padding_flags
}

define-command lsp-restart -override %{
    lsp-stop; lsp-start
}

declare-option -hidden str swap_buffer_target
define-command swap-buffer-with -override -params 1 -client-completion %{
    set-option global swap_buffer_target %val{bufname}
    edit -scratch # release current window for other client
    evaluate-commands -client %arg{1} "
        set-option global swap_buffer_target %%val{bufname}
        buffer %opt{swap_buffer_target}
    "
    delete-buffer # delete the temporary scratch buffer
    buffer %opt{swap_buffer_target}
}

add-highlighter -override global/show-whitespaces show-whitespaces \
    -tab '│' -tabpad ' ' -lf ' ' -spc ' ' -nbsp ' '

add-highlighter -override global/trailing-whitespace regex '\h+$' 0:Information

add-highlighter -override global/show-matching show-matching

# hook global WinCreate .* %{ window-padding }

hook -group delete-scratch-message global BufCreate '\Q*scratch*' %{
    execute-keys '%d'
}

try %{ declare-user-mode toggle }

map global user   t ':enter-user-mode toggle<ret>' -docstring 'Toggle'
map global toggle w ':toggle-wrap<ret>'            -docstring 'Wrap'

try %{ declare-user-mode reload }

map global user   r ':enter-user-mode reload<ret>' -docstring 'Reload'
map global reload f ':source-current-file<ret>'    -docstring 'Current file'
map global reload c ':source-kakrc<ret>'           -docstring 'kakrc'

try %{ declare-user-mode find }

map global user f   ':enter-user-mode find<ret>'   -docstring 'Find'
map global find f   ':find '                       -docstring 'File'
map global find b   ':buffer '                     -docstring 'Buffer'

map global user l   ':enter-user-mode lsp<ret>'    -docstring 'LSP mode'

map global user /   '/(?i)'                        -docstring 'Case-insensitive search'
map global user w   ':remove-whitespace<ret>'      -docstring 'Remove trailing whitespace'
map global user p   ':window-padding<ret>'         -docstring 'Window padding'
map global user a   ';li'                          -docstring 'Append'
map global user F   ':format-buffer<ret>'          -docstring 'Format buffer'

map global normal '%' '<c-s>%'
map global normal '#' :comment-line<ret>
map global normal <c-s> ':write<ret>'

# map global insert <ret> <esc>
# map global normal <ret> ':'
# hook global WinSetOption filetype=grep %{
#     map window normal <ret> ':grep-jump<ret>'
# }

hook global WinSetOption filetype=.* %{
    require-module smarttab
    expandtab
    set-option window tabstop 4
    set-option window indentwidth 4
    set-option window softtabstop 4
    # set-option window extra_word_chars
}

hook global WinSetOption filetype=elixir %{
    require-module smarttab
    expandtab
    set-option window tabstop 2
    set-option window indentwidth 2
    set-option window softtabstop 2
    hook window BufWritePre .* %{ lsp-formatting-sync }
}

hook global WinSetOption filetype=yaml %{
    require-module smarttab
    expandtab
    set-option window tabstop 2
    set-option window indentwidth 2
    set-option window softtabstop 2
}

hook global WinSetOption filetype=rust %{
    set-option window lsp_auto_highlight_references true
    set-option window formatcmd 'rustfmt'

    hook window BufWritePre .* %{ lsp-formatting-sync }
    # hook window BufWritePre .* %{ format-buffer }

    try lsp-enable-window
    lsp-diagnostic-lines-disable window
    lsp-inline-diagnostics-disable window
}

hook global WinSetOption filetype=elm %{
    # set-option window lsp_auto_highlight_references true
    set-option window formatcmd 'elm-format --stdin'

    expandtab
    set-option window tabstop 4
    set-option window indentwidth 4
    set-option window softtabstop 4

    # hook window BufWritePre .* %{ lsp-formatting-sync }
    # hook window BufWritePre .* %{ format-buffer }

    # try lsp-enable-window
    # lsp-diagnostic-lines-disable window
    # lsp-inline-diagnostics-disable window

    remove-highlighter shared/elm
    source "%val{config}/rc/highlight/elm.kak"
}

hook global BufCreate .*\.gleam %{
    set-option buffer filetype gleam
}

hook global WinSetOption filetype=gleam %{
    remove-highlighter shared/gleam
    source "%val{config}/rc/highlight/gleam.kak"
}

hook global WinSetOption filetype=go %{
    noexpandtab
    set-option window indentwidth 0
    set-option window lsp_auto_highlight_references true
    set-option window formatcmd 'goimports'

    # hook window BufWritePre .* %{ lsp-formatting-sync }
    hook window BufWritePre .* %{ format-buffer }

    try lsp-enable-window
    lsp-diagnostic-lines-disable window
    lsp-inline-diagnostics-disable window

    remove-highlighter shared/go
    source "%val{config}/rc/highlight/go.kak"
}

hook global WinSetOption filetype=makefile %{
    noexpandtab
    set-option window indentwidth 0
}
